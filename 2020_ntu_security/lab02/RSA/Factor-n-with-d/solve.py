#!/usr/bin/env python3
import random
from math import gcd
from Crypto.Util.number import *

def factor_n_with_d(n, e, d):
    while True:
        k = e * d - 1
        g = random.randint(2, n - 1)
        while True:
            if k % 2 == 1:
                break
            k //= 2
            x = int(pow(g, k, n))
            if x > 1 and 1 < gcd(x - 1, n) < n:
                p = gcd(x - 1, n)
                return p

n = 59371249515689367402379527153340373866551404276720898453934920424334145084748913330879403912011646827402596517540068465984460061741266328950633592345443605865518775239609439699245756718148885509276994876827794785458725863766050594872023829436044277479205310553728331356389000458336472776461489611060366854387
e1 = 257
d1 = 42045009384651614269389392770069836745962473067561103185276869716843635818771603993074130396833150671545807650553667162681602067069690552019514839715450324689783362383532491537247264575078606696620799918554305125092136932512467132242955704792177218296212365647344869659127809197474423164851003222589196643969
c = 58154232425369968866274105613565955403112051976930905513168676008669980923598045419025316008283611931961898985424993185738945836306719739891240258385472144147437547179889957152003232349565023515898805762851667069079748156154637419253211947243779096833552482947658663488737325310600935419163910188157820746532

p = factor_n_with_d(n, e1, d1)
q = n // p
e2 = 65537
d2 = inverse(e2, (p - 1) * (q - 1))
m = pow(c, d2, n)
print(long_to_bytes(m))
